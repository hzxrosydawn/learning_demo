<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.rosydwan</groupId>
    <artifactId>spring-demo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>spring-demo Maven WebApp</name>
    <description>Spring案例</description>
    <!-- FIXME change it to the project's website -->
    <url>http://www.example.com</url>

    <properties>
        <file.encoding>UTF-8</file.encoding>
        <spring.version>4.3.16.RELEASE</spring.version>
        <mysql.version>5.1.42</mysql.version>
        <javax.servlet-api.version>3.1.0</javax.servlet-api.version>
        <jsp-api.version>2.2</jsp-api.version>
        <jstl.version>1.2</jstl.version>
        <aspectj.version>1.8.1</aspectj.version>
        <commons-codec.version>1.10</commons-codec.version>
        <commons-dbcp.version>1.4</commons-dbcp.version>
        <hibernate.validator.version>5.4.1.Final</hibernate.validator.version>
        <jetty.version>8.1.8.v20121106</jetty.version>
        <slf4j.version>1.7.5</slf4j.version>
        <testng.version>6.8.7</testng.version>

        <!---->
        <app.main.class>com.rosydawn.resource.FileSourceExample</app.main.class>
        <manifest.compile.source>1.8</manifest.compile.source>
        <manifest.compile.target>1.8</manifest.compile.target>
        <manifest.compile.target>1.8</manifest.compile.target>

    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
            <version>${commons-dbcp.version}</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>${javax.servlet-api.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>${jsp-api.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${jstl.version}</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>${aspectj.version}</version>
        </dependency>


        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>spring-demo</finalName>
        <plugins>
            <!-- jetty插件 -->
            <plugin>
                <!-- 各版本的groupId稍有不同：
                从9.x.x开始的版本的groupId为org.eclipse.jetty，
                在8.x.x及之前的版本的groupId为org.mortbay.jetty -->
                <!--<groupId>org.eclipse.jetty</groupId>-->
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <!-- 各插件版本对应的JDK、Servlet即JSP版本：
                9.4.6.v20170531(JDK1.8+&Servlet3.1&JSP2.3)
                9.2.8.v20150217（JDK1.7+&Servlet3.1&JSP2.3）
                8.1.16.v20140903(JDK1.6+&Servlet3.0&JSP2.2)
                7.6.16.v20140903(JDK1.5+&Servlet2.5&JSP2.1) -->
                <version>8.1.16.v20140903</version>
                <!-- 7.x.x的版本不支持configuration元素 -->
                <configuration>
                    <!--<httpConnector>
                        <port>8081</port>
                    </httpConnector>--> <!--jetty 9 config-->
                    <stopKey>shutdown</stopKey>
                    <stopPort>9966</stopPort>
                    <scanIntervalSeconds>5</scanIntervalSeconds>
                    <reload>manual</reload>
                    <!--<dumpOnStart>true</dumpOnStart>-->
                    <connectors>
                        <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
                            <port>8080</port>
                            <maxIdleTime>60000</maxIdleTime>
                        </connector>
                    </connectors> <!--jetty 8 config-->
                    <webApp>
                        <contextPath>/${project.artifactId}</contextPath>
                        <!--
                        <resourceBases>
                          <resourceBase>${project.basedir}/src/main/webapp</resourceBase>
                          <resourceBase>${project.basedir}/commons</resourceBase>
                        </resourceBases>
                        -->
                    </webApp>
                    <requestLog implementation="org.eclipse.jetty.server.NCSARequestLog">
                        <filename>target/access-yyyy_mm_dd.log</filename>
                        <filenameDateFormat>yyyy_MM_dd</filenameDateFormat>
                        <logDateFormat>yyyy-MM-dd HH:mm:ss</logDateFormat>
                        <logTimeZone>GMT+8:00</logTimeZone>
                        <append>true</append>
                        <logServer>true</logServer>
                        <retainDays>120</retainDays>
                        <logCookies>true</logCookies>
                    </requestLog>
                </configuration>
            </plugin>


            <!-- maven 核心插件 -->
            <!-- maven-clean-plugin 插件负责删除编译生成的 target 目录 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
            <!-- maven-resources-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.2</version>

            </plugin>
            <!-- maven-compiler-plugin 插件负责处理编译 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <!-- put your compilation configurations here -->
                    <!--强制指定编译所用的JDK版本（默认为1.5），可以避免必须每次手动将IDE中的编译JDK版本调整到已有较高JDK版本-->
                    <source>1.8</source>
                    <target>1.8</target>
                    <!---->
                    <encoding>utf-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.20.1</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.0.2</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.5.2</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
            </plugin>

            <!-- maven-shade-plugin 插件可以将应用打包为超级的 uber-jar（也称为fat jar，或shaded jar）。在打包的过程中，可以
                包含依赖库、重命名依赖库的包名（以避免类库的冲突、有选择地打包。 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <!-- shade goal 默认加入到 Maven 的 package 阶段 -->
                        <goals>
                            <goal>shade</goal>
                        </goals>

                        <configuration>
                            <!-- put your configurations here -->

                            <transformers>
                                <!-- ManifestResourceTransformer 设置 MANIFEST 中的 entries -->
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <!-- 指定应用带 main() 方法的类。这样打出的包可以直接运行（main方法） -->
                                        <Main-Class>${app.main.class}</Main-Class>
                                        <X-Compile-Source-JDK>${manifest.compile.source}</X-Compile-Source-JDK>
                                        <X-Compile-Target-JDK>${manifest.compile.target}</X-Compile-Target-JDK>
                                    </manifestEntries>
                                </transformer>

                                <!-- DontIncludeResourceTransformer 用于在打包时不包含某些文件。
                                下面的配置包含.txt文件 -->
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
                                    <resource>.txt</resource>
                                </transformer>

                                <!-- IncludeResourceTransformer 用于在打包时包含某些文件。
                                下面的配置包含META-INF/README/README.txt-->
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                                    <resource>META-INF/README</resource>
                                    <file>README.txt</file>
                                </transformer>
                            </transformers>

                            <relocations>
                                <!-- 改变默认包名以避免冲突 -->
                                <!--<relocation>
                                    <pattern>com.app.old.jar</pattern>
                                    <shadedPattern>com.app.new.jar</shadedPattern>
                                </relocation>-->
                            </relocations>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
